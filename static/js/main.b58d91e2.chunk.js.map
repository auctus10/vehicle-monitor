{"version":3,"sources":["components/vehicle-map/index.js","components/vehicle-details/index.js","components/main-page/index.js","App.js","reportWebVitals.js","index.js"],"names":["Map","ReactMapboxGl","accessToken","process","REACT_APP_MAP_ACCESS_TOKEN","VehicleMap","location","renderFeatures","map","item","coordinates","lng","lat","console","log","startingLongitutde","startingLatitude","length","style","containerStyle","height","width","center","zoom","type","id","paint","layout","VehicleDetails","vehicle","useState","selectedTrip","setSelectedTrip","sortedByTime","sort","a","b","Date","startTime","slice","energyData","x","tripId","y","parseFloat","energy","toFixed","GridColumn","className","Card","raised","fluid","Content","Header","Feed","Event","Label","icon","content","dayjs","format","endTime","Summary","distance","Button","marginLeft","basic","size","labelPosition","onClick","Icon","name","renderVehicleDetails","Meta","dontCheckIfEmpty","title","tickTotal","data","mode","display","marginTop","Object","keys","i","renderTripDetails","MainPage","selectedVehicleData","setSelectedVehicleData","Grid","relaxed","Menu","secondary","vertical","Item","header","vehicleData","Set","trip","vin","active","split","join","filter","v","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58d91e2.chunk.js","sourcesContent":["import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: process.env.REACT_APP_MAP_ACCESS_TOKEN\r\n});\r\n\r\nconst VehicleMap = ({location}) => {\r\n  const renderFeatures = () => location.map((item) => <Feature coordinates={[item.lng, item.lat]} />)\r\n  console.log(location);\r\n\r\n  const startingLongitutde = location[0] ? location[0].lng : 77.6263028;\r\n  const startingLatitude = location[0] ? location[0].lat : 12.9160654;\r\n  return(\r\n    <>\r\n      {location.length === 0 ? <h4>Route Data not available</h4> : ''}\r\n      <Map\r\n        style=\"mapbox://styles/mapbox/streets-v11\"\r\n        containerStyle={{\r\n          height: '400px',\r\n          width: '400px'\r\n        }}\r\n        center={[startingLongitutde, startingLatitude]}\r\n        zoom={[12]}\r\n      >\r\n      <Layer \r\n        type=\"circle\" \r\n        id=\"route\" \r\n        paint={{\r\n        'circle-color': '#3792FF',\r\n        'circle-stroke-width': 0.5,\r\n        'circle-stroke-color': '#3792FF'\r\n        }}\r\n      >\r\n      {renderFeatures()}\r\n      </Layer>\r\n      <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'dot-11' }}>\r\n        {renderFeatures()}\r\n      </Layer>\r\n    </Map>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default VehicleMap;","import { useState } from 'react';\r\nimport { Button, Card, Feed, GridColumn, Icon } from 'semantic-ui-react';\r\nimport { XYPlot, LineMarkSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis } from 'react-vis';\r\nimport 'react-vis/dist/style.css';\r\nimport dayjs from 'dayjs';\r\n\r\nimport VehicleMap from '../vehicle-map';\r\n\r\nconst VehicleDetails = ({vehicle}) => {\r\n\r\n  const [selectedTrip, setSelectedTrip] = useState(null);\r\n\r\n  const sortedByTime = vehicle.sort((a, b) => new Date(b.startTime) - new Date(a.startTime)).slice(0, 10);\r\n\r\n\r\n  const energyData = sortedByTime.map((item) => {return {x: item.tripId, y : parseFloat((item.energy * 1000).toFixed(2))}});\r\n\r\n  if(vehicle.length === 0){\r\n    return <GridColumn className='page-coloumns'><h1>Please select a vehicle</h1></GridColumn>\r\n  }\r\n\r\n  const renderEnergyChart = () => (\r\n    <Card raised fluid>\r\n      <Card.Content>\r\n        <Card.Header>Energy Consumed</Card.Header>\r\n        <Card.Meta>\r\n          <span>Last 10 trips</span>\r\n        </Card.Meta>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <XYPlot dontCheckIfEmpty={true} height={610} width= {350}>\r\n          <VerticalGridLines  />\r\n          <HorizontalGridLines  />\r\n          <XAxis title='Trip ID' tickTotal={10} />\r\n          <YAxis title='Watts' tickTotal={30} />\r\n          <LineMarkSeries data={energyData} />\r\n        </XYPlot>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n\r\n  const renderVehicleDetails = (item) => (\r\n    <Feed.Event>\r\n      <Feed.Label icon='taxi' />\r\n      <Feed.Content>\r\n        <Feed.Date content={`Started at : ${dayjs(item.startTime).format('hh:mm:ss A DD/MMM/YYYY')} , Ended at : ${dayjs(item.endTime).format('hh:mm:ss A DD/MMM/YYYY')}`} />\r\n        <Feed.Summary>\r\n          Trip ID - {item.tripId} , Distance Travelled - {(item.distance/1000).toFixed(2)} Km\r\n          <Button style={{marginLeft : '1rem'}} basic size='small' icon labelPosition='left' onClick={() => setSelectedTrip(item)} >\r\n            <Icon name='hand point right' />\r\n            See trip details\r\n          </Button>\r\n        </Feed.Summary>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n  );\r\n\r\n  const renderTripDetails = () => {\r\n\r\n    const { mode, tripId, distance, startTime, endTime, energy, location } = selectedTrip;\r\n\r\n    return(\r\n      <Card raised fluid>\r\n        <Card.Content>\r\n          <Card.Header>Trip Details</Card.Header>\r\n          <Card.Meta>\r\n            <span>Trip ID : {tripId}</span>\r\n          </Card.Meta>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <div>\r\n            Mode Travelled in during trip - \r\n              <div style={{display: 'grid', marginTop: '0.5rem'}}>\r\n                {mode && Object.keys(mode).map((i) => <l1>{i} - {mode[i]} %</l1>)}\r\n              </div>\r\n          </div>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <div style={{display: 'grid', marginTop: '0.5rem'}}>\r\n              <li>Distance Traveled - {(distance/1000).toFixed(2)} Km</li>\r\n              <li>Trip Started at -  {dayjs(startTime).format('hh:mm:ss A DD/MMM/YYYY')}</li>\r\n              <li>Trip Ended at - {dayjs(endTime).format('hh:mm:ss A DD/MMM/YYYY')}</li>\r\n              <li>Energy consumed - { parseFloat((energy * 1000).toFixed(2))} Watts</li>\r\n          </div>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Card.Header>Route Taken -</Card.Header>\r\n          <VehicleMap location={location} />\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  };\r\n \r\n  return(\r\n    <>\r\n      <GridColumn className='page-coloumns'>\r\n      <Card raised fluid>\r\n        <Card.Content>\r\n          <Card.Header>Last 10 trips - </Card.Header>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Feed>\r\n            {sortedByTime.map(item => (renderVehicleDetails(item)))}\r\n          </Feed>\r\n        </Card.Content>\r\n      </Card>\r\n      </GridColumn>\r\n      <GridColumn className='page-coloumns'>\r\n         {renderEnergyChart()}\r\n      </GridColumn>\r\n      <GridColumn className='page-coloumns'>\r\n         {selectedTrip ? renderTripDetails() : ''}\r\n      </GridColumn>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VehicleDetails;","import { Menu, Grid, GridColumn } from 'semantic-ui-react';\r\nimport { useState } from 'react';\r\nimport './index.css';\r\nimport vehicleData from './fe_data.json';\r\nimport VehicleDetails from '../vehicle-details';\r\n\r\nconst MainPage = () => {\r\n  const [selectedVehicleData, setSelectedVehicleData] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <div className='simple-navbar'>\r\n        <div className='page-title-wrapper'>\r\n            <div className='page-title'> \r\n              <div className='content-boxed'>\r\n                <h1>Monitor The Vehicles</h1>\r\n                <span className='page-subtitle'>Get started below</span>\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <Grid relaxed='very'>\r\n        <GridColumn className='page-coloumns'>\r\n          <Menu className=\"side-navbar\" secondary vertical>\r\n            <Menu.Item header>VEHICLES</Menu.Item>\r\n            {vehicleData && [...new Set(vehicleData.trip.map(item => item.vin))].map(vehicle => (\r\n              <Menu.Item active={selectedVehicleData.length > 0 && selectedVehicleData[0].vin === vehicle} key={vehicle} name={vehicle.split('_').join(' ')} onClick={() => setSelectedVehicleData(vehicleData.trip.filter(v => v.vin === vehicle))} />\r\n            ))}\r\n          </Menu>\r\n        </GridColumn>\r\n        <VehicleDetails vehicle={selectedVehicleData} />\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import MainPage from './components/main-page';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}